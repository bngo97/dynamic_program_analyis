/* Generated By:JavaCC: Do not edit this line. MyParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PROG = 6;
  /** RegularExpression Id. */
  int CONST = 7;
  /** RegularExpression Id. */
  int ENUM = 8;
  /** RegularExpression Id. */
  int CLASS = 9;
  /** RegularExpression Id. */
  int INTERFACE = 10;
  /** RegularExpression Id. */
  int EXTENDS = 11;
  /** RegularExpression Id. */
  int IMPLEMENTS = 12;
  /** RegularExpression Id. */
  int VOID = 13;
  /** RegularExpression Id. */
  int NEW = 14;
  /** RegularExpression Id. */
  int IF = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int FOR = 17;
  /** RegularExpression Id. */
  int BREAK = 18;
  /** RegularExpression Id. */
  int CONTINUE = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int READ = 21;
  /** RegularExpression Id. */
  int PRINT = 22;
  /** RegularExpression Id. */
  int PLUS = 23;
  /** RegularExpression Id. */
  int MINUS = 24;
  /** RegularExpression Id. */
  int TIMES = 25;
  /** RegularExpression Id. */
  int DIV = 26;
  /** RegularExpression Id. */
  int MOD = 27;
  /** RegularExpression Id. */
  int EQ = 28;
  /** RegularExpression Id. */
  int EQEQ = 29;
  /** RegularExpression Id. */
  int NOTEQ = 30;
  /** RegularExpression Id. */
  int GR = 31;
  /** RegularExpression Id. */
  int GRE = 32;
  /** RegularExpression Id. */
  int LE = 33;
  /** RegularExpression Id. */
  int LEQ = 34;
  /** RegularExpression Id. */
  int AND = 35;
  /** RegularExpression Id. */
  int OR = 36;
  /** RegularExpression Id. */
  int PLUSx2 = 37;
  /** RegularExpression Id. */
  int MINUSx2 = 38;
  /** RegularExpression Id. */
  int NUM = 39;
  /** RegularExpression Id. */
  int BOOL = 40;
  /** RegularExpression Id. */
  int CHAR = 41;
  /** RegularExpression Id. */
  int IDENT = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "<token of kind 5>",
    "\"program\"",
    "\"const\"",
    "\"enum\"",
    "\"class\"",
    "\"interface\"",
    "\"extends\"",
    "\"implements\"",
    "\"void\"",
    "\"new\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"read\"",
    "\"print\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"&&\"",
    "\"||\"",
    "\"++\"",
    "\"--\"",
    "<NUM>",
    "<BOOL>",
    "<CHAR>",
    "<IDENT>",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\".\"",
  };

}
