PARSER_BEGIN(MyParser)
import java.io.StringReader;

public class MyParser
{

    public static void main(String[] args) throws ParseException {
        try {
            MyParser parser = new MyParser(new StringReader(args[0]));
            parser.Prog();
            System.out.println("Success!");
        } catch (ParseException e) {
            System.out.println("Syntax check failed:");
            System.out.println(e.getMessage());
        }
    }
}
PARSER_END(MyParser)

SKIP: { " " }
SKIP: { "\r" }
SKIP: { "\t" }

TOKEN: { <PROG: "program"> }
TOKEN: { <CONST: "const"> }

TOKEN: { <PLUS: "+"> }
TOKEN: { <MINUS: "-"> }
TOKEN: { <TIMES: "*"> }
TOKEN: { <DIV: "/"> }
TOKEN: { <MOD: "%"> }
TOKEN: { <EQ: "="> }
TOKEN: { <EQEQ: "=="> }
TOKEN: { <NOTEQ: "!="> }
TOKEN: { <GR: ">"> }
TOKEN: { <GRE: ">="> }
TOKEN: { <LE: "<"> }
TOKEN: { <LEQ: "<="> }
TOKEN: { <AND: "&&"> }
TOKEN: { <OR: "||"> }
TOKEN: { <PLUSx2: "++"> }
TOKEN: { <MINUSx2: "--"> }

TOKEN: { <NUM: ["1"-"9"] (["0"-"9"])*> }
TOKEN: { <BOOL: ( "true" | "false" )>}
TOKEN: { <CHAR: "'"[" " - "~"]"'">}
TOKEN: { <IDENT: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")*>}

void Prog(): {} { <PROG> <IDENT> (ConstDecl())* "{" "}" <EOF> }

void ConstDecl(): {} { <CONST> Type() <IDENT> "=" (<NUM> | <CHAR> | <BOOL>)}

void Type(): {} { <IDENT> }
