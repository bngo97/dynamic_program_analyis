PARSER_BEGIN(MyParser)
import java.io.StringReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class MyParser
{
    public static void main(String[] args) throws FileNotFoundException {
        if(args.length < 2 || args.length > 3) {
            throw new RuntimeException("Incorrect # of command arguments");
        }
        MyParser parser;
        if(args[0].equals("-t")) {
            parser = new MyParser(new StringReader(args[1]));
        } else if(args[0].equals("-f")) {
            File file = new File(args[1]);
            parser = new MyParser(new FileInputStream(file));
        } else {
            throw new RuntimeException("Incorrect input flag");
        }
        try {
            NodeProg ast = parser.Prog();
            Visitor v = new MyVisitor();
            ast.accept(v);
            System.out.println("Success!");
        } catch(ParseException e) {
            System.out.println("Failure Parsing!");
            System.out.println(e.getMessage());
        } catch(RuntimeException e) {
            System.out.println("Failure Running!");
            System.out.println(e.getMessage());
        }
    }
}
PARSER_END(MyParser)

SKIP: {<"//" (~["\n","\r"])* ("\n"|"\r")>}
SKIP: { " " }
SKIP: { "\n" }
SKIP: { "\r" }
SKIP: { "\t" }

TOKEN: { <PROG: "program"> }
TOKEN: { <CONST: "const"> }

TOKEN: { <ENUM: "enum"> }
TOKEN: { <CLASS: "class">}
TOKEN: { <INTERFACE: "interface"> }
TOKEN: { <EXTENDS: "extends"> }
TOKEN: { <IMPLEMENTS: "implements"> }
TOKEN: { <VOID: "void"> }
TOKEN: { <NEW: "new"> }
TOKEN: { <IF: "if"> }
TOKEN: { <ELSE: "else"> }
TOKEN: { <FOR: "for"> }
TOKEN: { <BREAK: "break"> }
TOKEN: { <CONTINUE: "continue"> }
TOKEN: { <RETURN: "return"> }
TOKEN: { <READ: "read"> }
TOKEN: { <PRINT: "print"> }

TOKEN: { <PLUS: "+"> }
TOKEN: { <MINUS: "-"> }

TOKEN: { <TIMES: "*"> }
TOKEN: { <DIV: "/"> }
TOKEN: { <MOD: "%"> }

TOKEN: { <EQ: "="> }

TOKEN: { <EQEQ: "=="> }
TOKEN: { <NOTEQ: "!="> }
TOKEN: { <GR: ">"> }
TOKEN: { <GRE: ">="> }
TOKEN: { <LE: "<"> }
TOKEN: { <LEQ: "<="> }

TOKEN: { <AND: "&&"> }
TOKEN: { <OR: "||"> }

TOKEN: { <PLUSx2: "++"> }
TOKEN: { <MINUSx2: "--"> }

TOKEN: { <NUM: (["0"-"9"])+ > }
TOKEN: { <BOOL: ( "true" | "false" )>}
TOKEN: { <CHAR: "'"[" " - "~"]"'">}
TOKEN: { <IDENT: (["a"-"z"] | ["A"-"Z"]) (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")*>}

NodeProg Prog(): {
    Token id;
    List<NodeConstDecl> constDecls = new ArrayList<NodeConstDecl>();
    List<NodeConstDecl> constDecl = null;
    List<NodeEnumDecl> enumDecls = new ArrayList<NodeEnumDecl>();
    NodeEnumDecl enumDecl = null;
    List<NodeVarDecl> varDecls = new ArrayList<NodeVarDecl>();
    List<NodeVarDecl> varDecl = null;
    List<NodeClassDecl> classDecls = new ArrayList<NodeClassDecl>();
    NodeClassDecl classDecl = null;
    List<NodeMethodDecl> methods = new ArrayList<NodeMethodDecl>();
    NodeMethodDecl method = null;
    List<NodeInterfaceDecl> interfaces = new ArrayList<NodeInterfaceDecl>();
    NodeInterfaceDecl interf = null;
} {
    <PROG> id=<IDENT>
    (
        constDecl=ConstDecl() { constDecls.addAll(constDecl); } |
        enumDecl=EnumDecl() { enumDecls.add(enumDecl); } |
        varDecl=VarDecl() { varDecls.addAll(varDecl); } |
        classDecl=ClassDecl() { classDecls.add(classDecl); } |
        interf=InterfaceDecl() { interfaces.add(interf); }
     )*
    "{"
    (
        method=MethodDecl() { methods.add(method); }
    )*
    "}" <EOF>
    {
        return new NodeProg(id.image, constDecls, enumDecls, varDecls, interfaces, classDecls, methods);
    }
}

List<NodeConstDecl> ConstDecl(): {
    List<NodeConstDecl> decls = new ArrayList<NodeConstDecl>();
    Token n, v;
    String t;
} {
    <CONST> t=Type() n=<IDENT> <EQ> ( v=<NUM> | v=<BOOL> | v=<CHAR> ) { decls.add(new NodeConstDecl(t, n.image, v.image)); }
    ("," n=<IDENT> <EQ> ( v=<NUM> | v=<BOOL> | v=<CHAR> ) { decls.add(new NodeConstDecl(t, n.image, v.image)); })* ";"
    {
        return decls;
    }
}

NodeEnumDecl EnumDecl(): {
    Token id;
    Token key = null, val = null;
    Map<String, String> vals = new HashMap<String, String>();
} { <ENUM> id=<IDENT> "{" key=<IDENT> [<EQ> val=<NUM>] {vals.put(key.image, val == null ? null : val.image); val = null;} ("," key=<IDENT> [<EQ> val=<NUM>] {vals.put(key.image, val == null ? null : val.image); val = null;})*"}"
    {
        return new NodeEnumDecl(id.image, vals);
    }
}

List<NodeVarDecl> VarDecl(): {
    List<NodeVarDecl> decls = new ArrayList<NodeVarDecl>();
    String t;
    Token id;
} { t=Type() id=<IDENT> ["[" "]"] { decls.add(new NodeVarDecl(t, id.image)); } ("," id=<IDENT> ["[" "]"] { decls.add(new NodeVarDecl(t, id.image)); } )* ";"
    {
        return decls;
    }
}

NodeInterfaceDecl InterfaceDecl(): {
    Token id;
    List<NodeInterfaceMethodDecl> methods = new ArrayList<NodeInterfaceMethodDecl>();
    NodeInterfaceMethodDecl method = null;
} { <INTERFACE> id=<IDENT> "{" (method=InterfaceMethodDecl() { methods.add(method); })* "}"
    {
        return new NodeInterfaceDecl(id.image, methods);
    }
}

NodeInterfaceMethodDecl InterfaceMethodDecl(): {
    Token id;
    String returnType = null;
    Map<String, String> formPars = null;
} { (returnType=Type() | <VOID> { if(returnType == null) returnType = "void"; }) id=<IDENT> "(" [formPars=FormPars()] ")" ";"
    {
        return new NodeInterfaceMethodDecl(id.image, returnType, formPars);
    }
}

Map<String,String> FormPars(): {
    Map<String,String> formPars = new HashMap<String,String>();
    String type;
    Token id;
} { type=Type() id=<IDENT> { formPars.put(id.image, type); } ["[" "]"] ("," type=Type() id=<IDENT> ["[" "]"] { formPars.put(id.image, type); })*
    {
        return formPars;
    }
}

NodeClassDecl ClassDecl(): {
    Token id;
    String parent = null;
    String impl = null;
    List<String> impls = new ArrayList<String>();
    List<NodeVarDecl> vars = new ArrayList<NodeVarDecl>();
    List<NodeVarDecl> var = null;
    List<NodeMethodDecl> methods = new ArrayList<NodeMethodDecl>();
    NodeMethodDecl method = null;
} { <CLASS> id=<IDENT> [<EXTENDS> parent=Type()] [<IMPLEMENTS> impl=Type() { impls.add(impl); } ("," impl=Type() { impls.add(impl); })* ]
    "{"
        (var=VarDecl() { vars.addAll(var); } )*
    ["{"
        (method=MethodDecl() { methods.add(method); } )*
    "}"]
    "}"
    {
        return new NodeClassDecl(id.image, parent, impls, vars, methods);
    }
}

NodeMethodDecl MethodDecl(): {
    String returnType = null;
    Token id;
    Map<String,String> formPars = new HashMap<String, String>();
    List<NodeVarDecl> vars = new ArrayList<NodeVarDecl>();
    List<NodeVarDecl> var = null;
    List<NodeStatement> statements = new ArrayList<NodeStatement>();
    NodeStatement statement;
} { (returnType=Type() | <VOID>) { if(returnType == null) returnType = "void"; } id=<IDENT> "(" [formPars=FormPars()] ")"
    (var=VarDecl() { vars.addAll(var); })*
    "{"
        (statement=Statement() { statements.add(statement); } )*
    "}"
    {
        return new NodeMethodDecl(id.image, returnType, formPars, vars, statements);
    }
}

String Type(): {Token id;} { id=<IDENT> { return id.image; } }

NodeStatement Statement(): {
    NodeStatement statement1 = null;
    NodeStatement statement2 = null;
    NodeStatement statement3 = null;
    NodeCondition condition = null;
    NodeExpr expression = null;
    NodeDesignator designator = null;
    Token t = null;
    List<NodeStatement> statements = new ArrayList<NodeStatement>();
} {
    (statement1=DesignatorStatement() ";" { return statement1; } ) |
    (<IF> "(" condition=Condition() ")" statement1=Statement() [<ELSE> statement2=Statement()]
    {
        return new NodeStatementIf(condition, statement1, statement2);
    }) |
    (<FOR> "(" [statement1=DesignatorStatement()] ";" [condition=Condition()] ";" [statement2=DesignatorStatement()] ")" statement3=Statement()
    {
        return new NodeStatementFor(statement1, condition, statement2, statement3);
    }) |
    (<BREAK> ";" { return new NodeStatementNoOp(); }) |
    (<CONTINUE> ";" { return new NodeStatementNoOp(); }) |
    (<RETURN> [expression=Expr()] ";" { return new NodeStatementReturn(expression); }) |
    (<READ> "(" designator=Designator() ")" ";" { return new NodeStatementRead(designator); }) |
    (<PRINT> "(" expression=Expr() ["," t=<NUM>] ")" ";" { return new NodeStatementPrint(expression, (t == null ? null : t.image)); }) |
    ("{" (statement1=Statement() { statements.add(statement1); })* "}" { return new NodeStatementNested(statements); })
    {
        return statement1;
    }
}

NodeStatementDesignator DesignatorStatement(): {
    NodeDesignator designator;
    NodeExpr expr = null;
    NodeActPars actPars = null;
} { designator=Designator() ((Assignop() expr=Expr()) | ("(" [actPars=ActPars()] ")") | <PLUSx2> | <MINUSx2>)
    {
        return new NodeStatementDesignator(designator, expr, actPars);
    }
}

NodeDesignator Designator(): {
    Token id;
    List<String> ids = new ArrayList<String>();
    List<NodeExpr> exprs = new ArrayList<NodeExpr>();
    NodeExpr expr = null;
} { id=<IDENT> { ids.add(id.image); } (("." id=<IDENT> { ids.add(id.image); }) | ("[" expr=Expr() { exprs.add(expr); } "]"))*
    {
        return new NodeDesignator(ids, exprs);
    }
}

NodeCondition Condition(): {
    List<NodeCondTerm> terms = new ArrayList<NodeCondTerm>();
    NodeCondTerm term = null;
} { term=CondTerm() { terms.add(term); } (<OR> term=CondTerm() { terms.add(term); })*
    {
        return new NodeCondition(terms);
    }
}

NodeCondTerm CondTerm(): {
    List<NodeCondFact> facts = new ArrayList<NodeCondFact>();
    NodeCondFact fact = null;
} { fact=CondFact() { facts.add(fact); } (<AND> fact=CondFact() { facts.add(fact); })*
    {
        return new NodeCondTerm(facts);
    }
}

NodeCondFact CondFact(): {
    NodeExpr expr1 = null;
    NodeExpr expr2 = null;
} { expr1=Expr() [Relop() expr2=Expr()]
    {
        return new NodeCondFact(expr1, expr2);
    }
}

NodeExpr Expr(): {
    List<NodeTerm> terms = new ArrayList<NodeTerm>();
    NodeTerm term = null;
} { [ <MINUS> ] term=Term() { terms.add(term); } (Addop() term=Term() { terms.add(term); })*
    {
        return new NodeExpr(terms);
    }
}

NodeTerm Term(): {
    List<NodeFactor> factors = new ArrayList<NodeFactor>();
    NodeFactor factor = null;
} { factor=Factor() { factors.add(factor); } (Mulop() factor=Factor() { factors.add(factor); })*
    {
        return new NodeTerm(factors);
    }
}

NodeFactor Factor(): {
    NodeFactor factor = null;
    NodeDesignator designator = null;
    NodeActPars actPars = null;
    Token t = null;
    String type;
    NodeExpr expr = null;
} { (
    (designator=Designator() ["(" [actPars=ActPars()] ")"] { factor = new NodeFactorDesignator(designator, actPars); }) |
    (t=<NUM> { factor = new NodeFactorPrimitive(t.image); } ) |
    (t=<CHAR> { factor = new NodeFactorPrimitive(t.image); } ) |
    (t=<BOOL> { factor = new NodeFactorPrimitive(t.image); } ) |
    (<NEW> type=Type() ["[" expr=Expr() "]"] { factor = new NodeFactorNew(type, expr); })
    )
    {
        return factor;
    }
}

NodeActPars ActPars(): {
    List<NodeExpr> exprs = new ArrayList<NodeExpr>();
    NodeExpr expr = null;
} { expr=Expr() { exprs.add(expr); } ("," expr=Expr() { exprs.add(expr); })*
    {
        return new NodeActPars(exprs);
    }
}

String Assignop(): { Token t; } { t=<EQ> { return t.image; } }

String Relop(): { Token t; } { ( t=<EQEQ> | t=<NOTEQ> | t=<GR> | t=<GRE> | t=<LE> | t=<LEQ> ) { return t.image; } }

String Addop(): { Token t; } { ( t=<PLUS> | t=<MINUS> ) { return t.image; } }

String Mulop(): { Token t; } { ( t=<TIMES> | t=<DIV> | t=<MOD> ) { return t.image; } }